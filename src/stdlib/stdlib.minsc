// Opcodes
// Generated with: curl -s https://raw.githubusercontent.com/rust-bitcoin/rust-bitcoin/master/src/blockdata/opcodes.rs | grep 'pub const'  | sed -r 's/.*(OP_\w+).* (0x\w{2}).*/\1 = script(\2),/' | egrep -v 'OP_RETURN_|PUSHNUM|PUSHBYTES|NOP|INVALIDOPCODE')
OP_PUSHDATA1 = script(0x4c), OP_PUSHDATA2 = script(0x4d), OP_PUSHDATA4 = script(0x4e), OP_RESERVED = script(0x50), OP_VER = script(0x62), OP_IF = script(0x63), OP_NOTIF = script(0x64), OP_VERIF = script(0x65), OP_VERNOTIF = script(0x66), OP_ELSE = script(0x67), OP_ENDIF = script(0x68), OP_VERIFY = script(0x69), OP_RETURN = script(0x6a), OP_TOALTSTACK = script(0x6b), OP_FROMALTSTACK = script(0x6c), OP_2DROP = script(0x6d), OP_2DUP = script(0x6e), OP_3DUP = script(0x6f), OP_2OVER = script(0x70), OP_2ROT = script(0x71), OP_2SWAP = script(0x72), OP_IFDUP = script(0x73), OP_DEPTH = script(0x74), OP_DROP = script(0x75), OP_DUP = script(0x76), OP_NIP = script(0x77), OP_OVER = script(0x78), OP_PICK = script(0x79), OP_ROLL = script(0x7a), OP_ROT = script(0x7b), OP_SWAP = script(0x7c), OP_TUCK = script(0x7d), OP_CAT = script(0x7e), OP_SUBSTR = script(0x7f), OP_LEFT = script(0x80), OP_RIGHT = script(0x81), OP_SIZE = script(0x82), OP_INVERT = script(0x83), OP_AND = script(0x84), OP_OR = script(0x85), OP_XOR = script(0x86), OP_EQUAL = script(0x87), OP_EQUALVERIFY = script(0x88), OP_RESERVED1 = script(0x89), OP_RESERVED2 = script(0x8a), OP_1ADD = script(0x8b), OP_1SUB = script(0x8c), OP_2MUL = script(0x8d), OP_2DIV = script(0x8e), OP_NEGATE = script(0x8f), OP_ABS = script(0x90), OP_NOT = script(0x91), OP_0NOTEQUAL = script(0x92), OP_ADD = script(0x93), OP_SUB = script(0x94), OP_MUL = script(0x95), OP_DIV = script(0x96), OP_MOD = script(0x97), OP_LSHIFT = script(0x98), OP_RSHIFT = script(0x99), OP_BOOLAND = script(0x9a), OP_BOOLOR = script(0x9b), OP_NUMEQUAL = script(0x9c), OP_NUMEQUALVERIFY = script(0x9d), OP_NUMNOTEQUAL = script(0x9e), OP_LESSTHAN = script(0x9f), OP_GREATERTHAN = script(0xa0), OP_LESSTHANOREQUAL = script(0xa1), OP_GREATERTHANOREQUAL = script(0xa2), OP_MIN = script(0xa3), OP_MAX = script(0xa4), OP_WITHIN = script(0xa5), OP_RIPEMD160 = script(0xa6), OP_SHA1 = script(0xa7), OP_SHA256 = script(0xa8), OP_HASH160 = script(0xa9), OP_HASH256 = script(0xaa), OP_CODESEPARATOR = script(0xab), OP_CHECKSIG = script(0xac), OP_CHECKSIGVERIFY = script(0xad), OP_CHECKMULTISIG = script(0xae), OP_CHECKMULTISIGVERIFY = script(0xaf), OP_CLTV = script(0xb1), OP_CSV = script(0xb2), OP_CHECKSIGADD = script(0xba);
OP_CHECKSEQUENCEVERIFY = OP_CSV;
OP_FALSE = `0`, OP_TRUE = `1`;

// Built-in unique Symbols
// These don't have any special meaning on the Rust side, but are used in Minsc code for various purposes
null = Symbol("null");
default = Symbol("default");

// Some useful constants
DUST_AMOUNT = 294;
DUST_NON_SW = 546;

// A point with unknown discrete logarithm (to eliminate key-path spend)
NUMS = pubkey(0x50929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0);
TR_UNSPENDABLE = NUMS, H_POINT = NUMS;

// Some aliases until I figure out what I like best
Script=script, Transaction=transaction, Address=address, PubKey=pubkey, Bytes=bytes, String=str, Int=int, Float=float, tx=Transaction;

// Common type checks
fn isArray($x) = typeof($x) == "array";
fn isFunction($x) = typeof($x) == "function";

//
// Array utilities
//
// len(), fillArray(), fold() & foldUntil() are Rust-provided builtins, everything else is built on top of them.

fn first($arr) = $arr.0;
fn last($arr) = $arr.(len($arr) - 1);
fn range($start, $end) = fillArray(($end-$start)+1, |$n| $start+$n);
fn keys($arr) = range(0, len($arr) - 1);
fn slice($arr, $start, $len) = fillArray($len, |$n| $arr.($start+$n));
fn tail($arr) = slice($arr, 1, len($arr) - 1); // get all but first element
fn initial($arr) = slice($arr, 0, len($arr) - 1); // get all but last element
fn isEmpty($arr) = len($arr) == 0;
repeat = fillArray; // alias name for a common fillArray use-case, to repeat Script fragments

fn flatMap($arr_, $fn_) = fold($arr_, [], |$acc_, $el_| $acc_ + $fn_($el_));
fn map($arr_, $fn_)     = fold($arr_, [], |$acc_, $el_| $acc_ + [ $fn_($el_) ]);
fn filter($arr_, $fn_)  = fold($arr_, [], |$acc_, $el_| $acc_ + if $fn_($el_) then [ $el_ ] else [ ]);

fn find($arr_, $fn_) = foldUntil($arr_, null,  |$acc_, $el_| if $fn_($el_)  then true:$el_  else false:null);
fn reduce($arr_, $fn_) = if !isEmpty($arr_) then fold(tail($arr_), $arr_.0, $fn_) else null;
fn mapValues($xs_, $fn_v) = map($xs_, |$x_| $x_.0: $fn_v($x_.1));

//
// Altstack utilities
//

// ROLL/PICK from the altstack. $n must be known statically (cannot be read from the stack)
fn rollAlt($n) = `
  repeat($n, OP_FROMALTSTACK)
  repeat($n - 1, `OP_SWAP OP_TOALTSTACK`)
`;
fn pickAlt($n) = `
  repeat($n, OP_FROMALTSTACK)
  OP_DUP OP_TOALTSTACK
  repeat($n - 1, `OP_SWAP OP_TOALTSTACK`)
`;
rollFromAltStack=rollAlt, pickFromAltStack=pickAlt;

// Read the top stack item as the number of stack items to send to the altstack
// stack in: <el1> <el2> .. <elN> <N total>, stack out: (empty)
// altstack out: <elN> .. <el2> <el1> <N total>
fn nToAlt($max_iterations) = `
  OP_DUP // keep a copy of the total number of elements
  // stack: <el1> <el2> .. <elN> <N total> <N counter>
  unrollFor($max_iterations, `OP_ROT OP_TOALTSTACK`)
  OP_TOALTSTACK // send the total number of elements as the final altstack item
`;

// The reverse of nToAlt() - bring back items from the altstack to the stack
// altstack in: <elN> .. <el2> <el1> <N total>, altstack out: (empty)
// stack in: (none), stack out: <el1> <el2> .. <elN> <N total>
fn nFromAlt($max_iterations) = `
  OP_FROMALTSTACK
  OP_DUP // keep a copy of the total number of elements
  // stack: <N total> <N counter>, alt stack: <el1> <el2> .. <elN>
  unrollFor($max_iterations, `OP_FROMALTSTACK OP_ROT OP_ROT`)
`;


//
// Control structure utilities
//


// Check a series of OP_IF..OP_ELSE conditions, running the script associated with the first match
// or the optional final `default` branch. If there's no match and no `default`, execution fails.
//
// For example, to match a number on the stack and run some code accordingly:
// ifelseif([
//   `OP_DUP 0 OP_EQUAL`: `OP_DROP $alice_pk OP_CHECKSIG`,
//   `OP_DUP 1 OP_EQUAL`: `OP_DROP <6 months> OP_CSV OP_DROP`,
//   default:             `OP_DROP $bob_pk OP_CHECKSIG`
// ])
fn ifelseif($clauses) = if isEmpty($clauses) then `` else `
  // Check all clauses but the last, running the first one that matches
  map(initial($clauses), |$clause| `$clause.0 OP_IF $clause.1 OP_ELSE`)

  // The last clause is checked using OP_VERIFY instead of another IF..ELSE to save some bytes.
  { if last($clauses).0 != default then `last($clauses).0 OP_VERIFY` else ``}
  last($clauses).1

  repeat(len($clauses) - 1, OP_ENDIF)
`;

// Match the item at the top of the stack against the clauses and run the matching script,
// keeping the item being matched around as necessary. For example:
// match([
//   `0 OP_EQUAL`: `$alice_pk OP_CHECKSIG`,
//   `1 OP_EQUAL`: `<6 months> OP_CSV OP_DROP`,
// ])
fn match($clauses) = if isEmpty($clauses) then `` else
  ifelseif(
    // DUP the value being matched to keep it available for the next clause, while allowing condition
    // scripts to consume it (with e.g. OP_EQUAL). It will be removed before the matching script is run.
    map(initial($clauses), |$clause| `OP_DUP $clause.0`: `OP_DROP $clause.1`)

    // The last clause doesn't need to DUP/DROP as there are no more conditions that need the value.
    // In the case of a `default` branch, the value will remain available on stack.
    + [ last($clauses) ]
  );

// Match the item at the top of the stack for equality.
// For example: switch([ 0: `$alice_pk OP_CHECKSIG`, 1: `<6 months> OP_CSV OP_DROP` ])
fn switch($clauses) = match(map($clauses, |$clause| {
  $condition = if $clause.0 != default then `$clause.0 OP_EQUAL` else default;
  $condition: $clause.1
}));

// Pop an index number off the stack and execute the `$scripts` branch with that index.
// This can typically be better accomplished with separate Taproot leaves for the script
// branches, but branching within a single Script may be preferable for some simple cases.
// Does not support a `default` branch.
// For example: select([ `$alice_pk OP_CHECKSIG`, `<6 months> OP_CSV OP_DROP` ])
fn select($scripts) =
  if len($scripts) == 2 // special-case optimization for 2 branches (MINIMALIF enforces 0/1 only)
    then `OP_IF $scripts.0 OP_ELSE $scripts.1 OP_ENDIF`
    else switch(map(keys($scripts), |$index| $index: $scripts.$index))
;


//
// Looping utilities
//

// Loop unrolling: run $loop_body as long as $condition is met, up to $max_iterations times
// $loop_body can be a Script or a Function that accepts the iteration count and returns a Script.
// For example: `<num> unrollLoop(50, `OP_DUP 0 OP_GREATERTHANOREQUAL`, `OP_1SUB`)` to count down from <num> to 0, for <num>s of up to 50
// more advanced example with some comments: https://gist.github.com/shesek/758c25489869d77d4ef624ea43f18c49
fn unrollLoop($max_iterations, $condition, $loop_body) {
  $loop_fn = if isFunction($loop_body) then $loop_body else |_| $loop_body;

  fn _unrollLoop($loop_i) =
    if $max_iterations > $loop_i
      then `$condition OP_IF $loop_fn($loop_i) _unrollLoop($loop_i+1) OP_ENDIF`
      else `$condition OP_NOT OP_VERIFY` // fail the script if the condition is still met after $max_iterations
  ;
  _unrollLoop(0)
}

// Read the top stack item as the number of times to run $for_body
// Example with accumulator: `0 <num> unrollFor(50, `OP_DUP OP_ROT OP_ADD OP_SWAP`)` to sum the numbers from <num> to 1
fn unrollFor($max_iterations, $for_body) {
  $for_fn = if isFunction($for_body) then $for_body else |_| $for_body;
  `
    unrollLoop($max_iterations, `OP_DUP OP_0NOTEQUAL`, |$for_i| `$for_fn($for_i) OP_1SUB`)
    OP_DROP // drop the counter (always 0 by now)
  `
}

//
// General utilities
//

// env() with debug() formatting
fn env::debug() = mapValues(env(), |$v| if !isFunction($v) then debug($v) else $v);

// Function form for assigning execution probabilities
fn prob($n, $val) = $n@$val;

// For compatibility with code that uses the old `iif()` function, which was replaced
// with if..then..else expressions. Will probably be eventually removed.
fn iif($condition, $then, $else) {
  $result = if $condition then $then else $else;
  if typeof($result) == "function" then $result()
  else $result
}
