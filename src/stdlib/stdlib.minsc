// Opcodes
// Generated with: curl -s https://raw.githubusercontent.com/rust-bitcoin/rust-bitcoin/master/src/blockdata/opcodes.rs | grep 'pub const'  | sed -r 's/.*(OP_\w+).* (0x\w{2}).*/\1 = rawscript(\2),/' | egrep -v 'OP_RETURN_|PUSHNUM|PUSHBYTES|NOP|INVALIDOPCODE')
OP_PUSHDATA1 = rawscript(0x4c), OP_PUSHDATA2 = rawscript(0x4d), OP_PUSHDATA4 = rawscript(0x4e), OP_RESERVED = rawscript(0x50), OP_VER = rawscript(0x62), OP_IF = rawscript(0x63), OP_NOTIF = rawscript(0x64), OP_VERIF = rawscript(0x65), OP_VERNOTIF = rawscript(0x66), OP_ELSE = rawscript(0x67), OP_ENDIF = rawscript(0x68), OP_VERIFY = rawscript(0x69), OP_RETURN = rawscript(0x6a), OP_TOALTSTACK = rawscript(0x6b), OP_FROMALTSTACK = rawscript(0x6c), OP_2DROP = rawscript(0x6d), OP_2DUP = rawscript(0x6e), OP_3DUP = rawscript(0x6f), OP_2OVER = rawscript(0x70), OP_2ROT = rawscript(0x71), OP_2SWAP = rawscript(0x72), OP_IFDUP = rawscript(0x73), OP_DEPTH = rawscript(0x74), OP_DROP = rawscript(0x75), OP_DUP = rawscript(0x76), OP_NIP = rawscript(0x77), OP_OVER = rawscript(0x78), OP_PICK = rawscript(0x79), OP_ROLL = rawscript(0x7a), OP_ROT = rawscript(0x7b), OP_SWAP = rawscript(0x7c), OP_TUCK = rawscript(0x7d), OP_CAT = rawscript(0x7e), OP_SUBSTR = rawscript(0x7f), OP_LEFT = rawscript(0x80), OP_RIGHT = rawscript(0x81), OP_SIZE = rawscript(0x82), OP_INVERT = rawscript(0x83), OP_AND = rawscript(0x84), OP_OR = rawscript(0x85), OP_XOR = rawscript(0x86), OP_EQUAL = rawscript(0x87), OP_EQUALVERIFY = rawscript(0x88), OP_RESERVED1 = rawscript(0x89), OP_RESERVED2 = rawscript(0x8a), OP_1ADD = rawscript(0x8b), OP_1SUB = rawscript(0x8c), OP_2MUL = rawscript(0x8d), OP_2DIV = rawscript(0x8e), OP_NEGATE = rawscript(0x8f), OP_ABS = rawscript(0x90), OP_NOT = rawscript(0x91), OP_0NOTEQUAL = rawscript(0x92), OP_ADD = rawscript(0x93), OP_SUB = rawscript(0x94), OP_MUL = rawscript(0x95), OP_DIV = rawscript(0x96), OP_MOD = rawscript(0x97), OP_LSHIFT = rawscript(0x98), OP_RSHIFT = rawscript(0x99), OP_BOOLAND = rawscript(0x9a), OP_BOOLOR = rawscript(0x9b), OP_NUMEQUAL = rawscript(0x9c), OP_NUMEQUALVERIFY = rawscript(0x9d), OP_NUMNOTEQUAL = rawscript(0x9e), OP_LESSTHAN = rawscript(0x9f), OP_GREATERTHAN = rawscript(0xa0), OP_LESSTHANOREQUAL = rawscript(0xa1), OP_GREATERTHANOREQUAL = rawscript(0xa2), OP_MIN = rawscript(0xa3), OP_MAX = rawscript(0xa4), OP_WITHIN = rawscript(0xa5), OP_RIPEMD160 = rawscript(0xa6), OP_SHA1 = rawscript(0xa7), OP_SHA256 = rawscript(0xa8), OP_HASH160 = rawscript(0xa9), OP_HASH256 = rawscript(0xaa), OP_CODESEPARATOR = rawscript(0xab), OP_CHECKSIG = rawscript(0xac), OP_CHECKSIGVERIFY = rawscript(0xad), OP_CHECKMULTISIG = rawscript(0xae), OP_CHECKMULTISIGVERIFY = rawscript(0xaf), OP_CLTV = rawscript(0xb1), OP_CSV = rawscript(0xb2), OP_CHECKSIGADD = rawscript(0xba);
OP_CHECKSEQUENCEVERIFY = OP_CSV;
OP_FALSE = `0`, OP_TRUE = `1`;

// Some useful constants
DUST_AMOUNT = 294;
DUST_NON_SW = 546;

// A point with unknown discrete logarithm (to eliminate key-path spend)
NUMS = pubkey(0x50929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0);
TR_UNSPENDABLE = NUMS, H_POINT = NUMS;

// Array functions
fn first($arr) = $arr.0;
fn last($arr) = $arr.(len($arr) - 1);
fn map($arr_, $cb_) = repeat(len($arr_), |$n_| $cb_($arr_.$n_));
fn range($start, $end) = repeat(($end-$start)+1, |$n| $start+$n);
fn keys($arr) = range(0, len($arr) - 1);
fn slice($arr, $start, $len) = map(range($start, $start + $len - 1), |$n| $arr.$n);
fn tail($arr) = slice($arr, 1, len($arr) - 1); // get all but first element
fn initial($arr) = slice($arr, 0, len($arr) - 1); // get all but last element

// ROLL/PICK from the altstack. $n must be known statically (cannot be read from the stack)
fn rollFromAltStack($n) = `
  repeat($n, OP_FROMALTSTACK)
  repeat($n - 1, `OP_SWAP OP_TOALTSTACK`)
`;
fn pickFromAltStack($n) = `
  repeat($n, OP_FROMALTSTACK)
  OP_DUP OP_TOALTSTACK
  repeat($n - 1, `OP_SWAP OP_TOALTSTACK`)
`;

// Match the item at the top of the stack against the clauses and run the matching script, or abort if there's no match
// Each clause is a tuple of [ condition_code, body_code ]. For example: switch([ [ `0 OP_EQUAL`, handleFoo ], [ `1 OP_EQUAL`, handleBar ] ])
// Clause conditions are expected to consume the value being matched (e.g. with OP_EQUAL). It will be DUPd for them.
// The last clause can be provided as a single element `[ body_code ]` with no condition to be used as the default branch.
fn switch($clauses) = `
  map(initial($clauses), |$clause|
    `OP_DUP $clause.0 OP_IF OP_DROP $clause.1 OP_ELSE`)
  // Using OP_VERIFY instead of another IF for the last fragment saves 4 bytes
  last($clauses).0 iif(len(last($clauses)) == 2, `OP_VERIFY last($clauses).1`, ``)
  repeat(len($clauses) - 1, OP_ENDIF)
`;

// Pop an index number off the stack and execute the script branch with that index
// For example select([ handleFoo, handleBar ]) to run `handleFoo` if the top stack
// element is 0, `handleBar` if its 1, or fail the script if its neither
fn select($scripts) =
  iif(len($scripts) == 2, // special case optimization for 2 branches
    || `OP_IF $scripts.0 OP_ELSE $scripts.1 OP_ENDIF`,
    || switch(map(keys($scripts), |$n| [ `$n OP_EQUAL`, $scripts.$n ]))
  );

// Loop unrolling
fn unrollLoop($max_iterations, $condition, $body) = iif($max_iterations > 0,
  || `
    $condition OP_IF
      $body
      unrollLoop($max_iterations - 1, $condition, $body)
    OP_ENDIF
  `,
  // Fail the script if the condition is still met but we're passed the $max_iterations limit
  || `$condition OP_NOT OP_VERIFY`
);
// e.g. `<num> unrollLoop(50, `OP_DUP 0 OP_GREATERTHANOREQUAL`, `OP_1SUB`)` to count down from <num> to 0, for <num>s of up to 50
// example with accumulator: `0 <num> unrollLoop(50, `OP_DUP OP_0NOTEQUAL`, `OP_DUP OP_ROT OP_ADD OP_SWAP OP_1SUB`) OP_DROP` to sum the numbers from <num> to 1
// more advanced example with some comments: https://gist.github.com/shesek/758c25489869d77d4ef624ea43f18c49

// Function form for assigning execution probabilities
fn prob($n, $val) = $n@$val;