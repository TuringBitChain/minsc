use std::str::FromStr;
use crate::{ast, Expr, Stmt, Error};
use crate::util::concat;

grammar;

extern {
  type Error = Error;
}

match {
  // Skip extra whitespace
  r"\s*" => { },
  // Skip `//` comments
  r"//[^\n\r]*[\n\r]*" => { },
  _,
}

// Top-level program
// Can have an optional return value (or use the main() function instead)
pub Program: Expr = <stmts:Stmt*> <ret:Return?> =>
  ast::Block { stmts, return_value: ret.map(Into::into) }.into();

// A block with a return value
// Used for function bodies and block expressions.
Block: Expr = <stmts:Stmt*> <ret:Return> =>
  ast::Block { stmts, return_value: Some(ret.into()) }.into();

// A collection of statements with no return value
// Used for library files and for the body of if statements
pub Stmts: ast::Stmts = <stmts:Stmt*> => ast::Stmts { stmts };

Stmt = {
  FnDef,
  Assign,
  IfStmt,
}

Expr = {
  SimpleExpr,
  And,
  Or,
  IfExpr,
  ChildDerive,
  FnExpr,
  Infix,
  Not,
  Duration,
};

SimpleExpr = {
  Number,
  Ident,
  Bytes,
  String,
  Call,
  BlockExpr,
  Thresh,
  Array,
  ArrayAccess,
  DateTime,
  BtcAmount,
  PubKey,
  ScriptFrag,
  InfixProb,
  Paren<Expr>,
};

SExpr = {
  Number,
  Ident,
  Bytes,
  String,
  Call,
  Paren<Expr>,
  BlockExpr,
};

Return = {
  Expr, // the preferred form
  "return" <Expr> ";"?,
};

//
// Expressions
//

Number = { Int, Float };

Int: Expr = <s:r"-?\d{1,39}"> =>?
  Ok(i64::from_str(<>).map_err(Error::from)?.into());
Float: Expr = <s:r"-?\d{1,39}\.\d{1,39}"> =>?
  Ok(f64::from_str(<>).map_err(Error::from)?.into());

IdentTerm: ast::Ident = <s:r"[a-zA-Z_$][a-zA-Z0-9_$]{0,38}"> => ast::Ident(<>.into());
Ident: Expr = IdentTerm => <>.into();

Call: Expr = <ident:IdentTerm> "(" <args:List0<Expr, ",">> ")" =>
    ast::Call { ident, args }.into();

IfExpr: Expr = "if" <condition:Expr> <then_val:IfExprThenVal> "else" <else_val:Expr> =>
    ast::IfExpr { condition: condition.into(), then_val: then_val.into(), else_val: else_val.into() }.into();

IfExprThenVal = { BlockExpr, "then" <Expr> };

And: Expr = <List2<AndOrBranch, "&&">> => ast::And(<>).into();
Or: Expr = <List2<AndOrBranch, "||">> => ast::Or(<>).into();
AndOrBranch = { SimpleExpr, ChildDerive };

Thresh: Expr = <thresh:SExpr> "of" <policies:SimpleExpr> =>
  ast::Thresh { thresh: thresh.into(), policies: policies.into() }.into();

BlockExpr: Expr = "{" <Block> "}" => <>.into();

Array = { ArraySquare, ArrayCurly }

// Standard square brackets array - [E1, E2, E3, ...]
ArraySquare: Expr = "[" <List0<Expr, ",">> "]" =>
  ast::Array(<>).into();

// Support curly brackets arrays with exactly two elements: {E1,E2}
// For compatibility with the BIP386 tr() Output Descriptor syntax for script trees
ArrayCurly: Expr = "{" <e1:Expr> "," <e2:Expr> "}" =>
  ast::Array(vec![e1, e2]).into();

ArrayAccess: Expr = <array:ArrayAccessLHS> "." <index:SExpr> =>
  ast::ArrayAccess { array: array.into(), index: index.into() }.into();
ArrayAccessLHS = { Ident, Call, Array, BlockExpr, Bytes, ArrayAccess };

// An xpub or compressed standalone public key (uncompressed is unsupported), with optional bip32 origin
PubKey: Expr = <s:r"(\[[a-fA-F0-9]{8}(/\d+['h]?)*\])?([a-fA-F0-9]{66}|([xt]pub[0-9a-zA-Z]{100,120}))"> =>
    Expr::PubKey(<>.into());

Bytes: Expr = {
  <s:r"0x[a-fA-F0-9]*"> =>? Ok(Expr::bytes_from_hex(&<>[2..])?),

  // Bytes are typically constructed with the `0x` prefix, but can be constructed without
  // it if the length is exactly 32 or 20 bytes. This is done for compatibility with the
  // Miniscript Policy syntax for hash and x-only-pubkey literals. The Bytes value will
  // later get coerced into a PubKey/Hash as needed.
  <s:r"[a-fA-F0-9]{64}|[a-fA-F0-9]{40}"> =>? Ok(Expr::bytes_from_hex(&<>)?),
};

String: Expr = {
  <s:r#""([^\\"]|\\[\\ntr"])*""#> => Expr::string_from_escaped_str(&<>[1..<>.len()-1]),
};

// BIP32 child key derivation
ChildDerive: Expr = {
    <parent:SimpleExpr> "/" <path:List1<ChildDerivePart, "/">> <wildcard:ChildDeriveWildcard?> =>
      ast::ChildDerive { parent: parent.into(), path, is_wildcard: wildcard.is_some() }.into(),
    <parent:SimpleExpr> <wildcard:ChildDeriveWildcard> =>
      ast::ChildDerive { parent: parent.into(), path: vec![], is_wildcard: true }.into(),
};
ChildDerivePart: Expr = {
  SimpleExpr,
  // For compatibility with the BIP389 multipath descriptor syntax: XPUB/0/<0;1>/9
  // This can alternatively be expressed using standard Minsc arrays: XPUB/0/[0,1]/9
  "<" <List2<SimpleExpr, ";">> ">" => ast::Array(<>).into(),
};
// Allow `xpub/ *` so that it doesn't look like a comment.
ChildDeriveWildcard = { "/*", "/ *" };

ScriptFrag: Expr = "`" <fragments:ScriptFragPart*> "`" =>
  ast::ScriptFrag { fragments }.into();
ScriptFragPart = { ScriptFragPart_, "<" <SimpleExpr> ">", "<" <Duration> ">" };
ScriptFragPart_ = { Ident, Number, Call, BlockExpr, ArrayAccess, PubKey, Bytes, String, DateTime, Array };

FnExpr: Expr = <signature:FnExprSignature> <body:Expr> =>
    ast::FnExpr { signature, body: body.into() }.into();
FnExprSignature = {
  "|" <List0<IdentTerm, ",">> "|",
  // No arguments should already be captured by the `List0`, but for some reason it isn't.
  // Possibly because `||` is also a terminal for policy OR?
  "||" => vec![],
};

// Infix op with two operands
Infix: Expr = <lhs:InfixLhs> <op:InfixOp> <rhs:Expr> =>
   ast::Infix { op, lhs: lhs.into(), rhs: rhs.into() }.into();

InfixLhs = { SimpleExpr, Duration, ChildDerive };

InfixOp: ast::InfixOp = {
  "+" => ast::InfixOp::Add,
  "-" => ast::InfixOp::Subtract,
  "*" => ast::InfixOp::Multiply,
  "==" => ast::InfixOp::Eq,
  "!=" => ast::InfixOp::NotEq,
  ">" => ast::InfixOp::Gt,
  "<" => ast::InfixOp::Lt,
  ">=" => ast::InfixOp::Gte,
  "<=" => ast::InfixOp::Lte,
};

// This is defined separately from InfixOp with less options for the LHS/RHS, so that
// it can be used unambiguously as an AndOrBranch element without requiring parenthesis.
InfixProb: Expr = <lhs:SExpr> "@" <rhs:SimpleExpr> =>
  ast::Infix { op: ast::InfixOp::Prob, lhs: lhs.into(), rhs: rhs.into() }.into();

Not: Expr = "!" <Expr> =>
  ast::Not(<>.into()).into();

// Duration and times

Duration = { DurationBlocks, DurationTime };

DurationBlocks: Expr = <num:SExpr> "blocks" =>
  ast::Duration::BlockHeight(num.into()).into();

DurationTime: Expr = <heightwise:"heightwise"?> <parts:DurationTimePart+>  =>
  ast::Duration::BlockTime { parts, heightwise: heightwise.is_some() }.into();

DurationTimePart: ast::DurationPart = <n:DurationTimeNum> <i:DurationTimeUnit> =>
  (n.into(), i);

// Similar to SExpr, but without BlockExpr which for some reason cannot be contained here directly
// Paren<BlockExpr> can be used instead
DurationTimeNum = { Number, Call, Ident, Paren<Expr> };

DurationTimeUnit: ast::DurationUnit = {
  "year" => ast::DurationUnit::Years,
  "years" => ast::DurationUnit::Years,
  "month" => ast::DurationUnit::Months,
  "months" => ast::DurationUnit::Months,
  "day" => ast::DurationUnit::Days,
  "days" => ast::DurationUnit::Days,
  "hour" => ast::DurationUnit::Hours,
  "hours" => ast::DurationUnit::Hours,
  "minute" => ast::DurationUnit::Minutes,
  "minutes" => ast::DurationUnit::Minutes,
  "second" => ast::DurationUnit::Seconds,
  "seconds" => ast::DurationUnit::Seconds,
}

DateTime: Expr = r"\d{4}-\d{1,2}-\d{1,2}(\s+\d{1,2}:\d{1,2})?" =>
  ast::DateTime(<>.into()).into();

BtcAmount: Expr = <num:SExpr> <denom:BtcDenomination> =>
  ast::BtcAmount(num.into(), denom.parse().expect("must be valid")).into();

BtcDenomination = {
  "BTC", "mBTC", "uBTC",
  "bit", "bits", "satoshi", "satoshis",
  "sat", "sats", "msat", "msats",
};

//
// Statements
//

Assign: Stmt = "let"? <assigns:List1<Assignment, ",">> ";" =>
    ast::Assign(assigns).into();

Assignment: ast::Assignment = <lhs:IdentTerm> "=" <rhs:Expr> =>
    ast::Assignment { lhs, rhs };

FnDef: Stmt = {
    "fn" <ident:IdentTerm> "(" <signature:List0<IdentTerm, ",">> ")" "=" <body:Expr> ";" =>
        ast::FnDef { ident, signature, body }.into(),
    "fn" <ident:IdentTerm> "(" <signature:List0<IdentTerm, ",">> ")" "{" <body:Block> "}" ";"? =>
        ast::FnDef { ident, signature, body }.into(),
}

IfStmt: Stmt = "if" <condition:Expr> "{" <then_body:Stmts> "}"
               <else_body:("else" "{" <Stmts> "}")?> =>
    ast::IfStmt { condition: condition.into(), then_body: then_body.into(), else_body: else_body.into() }.into();

// Helpers

// A `S`-separated list of zero or more `T` values
List0<T, S>: Vec<T> = <l:(<T> S)*> <t:T?> => concat(l, t);

// A `S`-separated list of one or more `T` values
List1<T, S>: Vec<T> = <l:(<T> S)*> <t:T> => concat(l, Some(t));

// A `S`-separated list of two or more `T` values
List2<T, S>: Vec<T> = <l:(<T> S)+> <t:T> => concat(l, Some(t));

Paren<T> = "(" <T> ")";
